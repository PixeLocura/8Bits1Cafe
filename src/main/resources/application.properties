spring.application.name=8Bits1Cafe
server.servlet.context-path=/api/v1
#server.port=8081

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection


spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
# spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.format_sql=false

# Hibernate dialect configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Ensure schema updates automatically
# spring.jpa.hibernate.ddl-auto=update


# keep normal INFO for everything else?
logging.level.root=INFO

# ?but turn on DEBUG for your service impl
logging.level.com.pixelocura.bitscafe.service.impl=DEBUG

# API documentation URLs - override with environment variables
bitscafe.openapi.dev-url=${BITSCAFE_OPENAPI_DEV_URL:http://localhost:8080/api/v1/}
bitscafe.openapi.prod-url=${BITSCAFE_OPENAPI_PROD_URL:https://eightbits1cafe.onrender.com/api/v1/}

# Clave secreta utilizada para firmar y verificar los tokens JWT. Debe mantenerse segura.
jwt.secret=chLhMF9w3mwDutysbQxsX8x4CGwZef4mayTGSmbAG2BUsXbYFKvXrVfnPCa62PJxp9TuHxx4PQAS2yGUTBAPy3Dy53j8Uj2wb2AQ3nK8VLg7tUx9HCzHATEp
# Tiempo de validez de los tokens JWT en segundos (30 dias).
jwt.validity-in-seconds=2592000

# Google OAuth2 configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com

# Discord OAuth2 configuration
spring.security.oauth2.client.registration.discord.client-id=${DISCORD_CLIENT_ID}
spring.security.oauth2.client.registration.discord.client-secret=${DISCORD_CLIENT_SECRET}
spring.security.oauth2.client.registration.discord.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.discord.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.discord.scope=identify,email
spring.security.oauth2.client.registration.discord.redirect-uri={baseUrl}/login/oauth2/code/discord
spring.security.oauth2.client.provider.discord.authorization-uri=https://discord.com/api/oauth2/authorize
spring.security.oauth2.client.provider.discord.token-uri=https://discord.com/api/oauth2/token
spring.security.oauth2.client.provider.discord.user-info-uri=https://discord.com/api/users/@me
spring.security.oauth2.client.provider.discord.user-name-attribute=id
